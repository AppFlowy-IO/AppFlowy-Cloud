use std::ops::DerefMut;

use chrono::{DateTime, Utc};
use pgvector::Vector;
use sqlx::Transaction;
use uuid::Uuid;

pub async fn search_documents(
  tx: &mut Transaction<'_, sqlx::Postgres>,
  params: SearchDocumentParams,
) -> Result<Vec<SearchDocumentItem>, sqlx::Error> {
  let query = sqlx::query_as::<_, SearchDocumentItem>(
    r#"
    SELECT
      em.oid AS object_id,
      collab.workspace_id,
      em.partition_key AS collab_type,
      LEFT(em.content, $4) AS content_preview,
      u.name AS created_by,
      collab.created_at AS created_at,
      em.embedding <=> $3 AS score
    FROM af_collab_embeddings em
    JOIN af_collab collab ON em.oid = collab.oid AND em.partition_key = collab.partition_key
    JOIN af_collab_member member ON collab.oid = member.oid
    JOIN af_user u ON collab.owner_uid = u.uid
    WHERE member.uid = $1 AND collab.workspace_id = $2 AND collab.deleted_at IS NULL
    ORDER BY em.embedding <=> $3
    LIMIT $5
  "#,
  )
  .bind(params.user_id)
  .bind(params.workspace_id)
  .bind(Vector::from(params.embedding))
  .bind(params.preview)
  .bind(params.limit);
  let rows = query.fetch_all(tx.deref_mut()).await?;
  Ok(rows)
}

#[derive(Debug, Clone)]
pub struct SearchDocumentParams {
  /// ID of the user who is searching.
  pub user_id: i64,
  /// Workspace ID to search for documents in.
  pub workspace_id: Uuid,
  /// How many results should be returned.
  pub limit: i32,
  /// How many characters of the content (starting from the beginning) should be returned.
  pub preview: i32,
  /// Embedding of the query - generated by OpenAI embedder.
  pub embedding: Vec<f32>,
}

#[derive(Debug, Clone, sqlx::FromRow)]
pub struct SearchDocumentItem {
  /// Document identifier.
  pub object_id: String,
  /// Workspace identifier, given document belongs to.
  pub workspace_id: Uuid,
  /// Partition key, which maps directly onto [collab_entity::CollabType].
  pub collab_type: i32,
  /// Type of the content to be presented. Maps directly onto [database_entity::dto::EmbeddingContentType].
  pub content_type: i32,
  /// First N character of the indexed content.
  pub content_preview: Option<String>,
  /// Name of the user who's an owner of the document.
  pub created_by: String,
  /// When the document was created.
  pub created_at: DateTime<Utc>,
  /// Similarity score to an original query. Lower is better.
  pub score: f64,
}
